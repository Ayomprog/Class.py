class Smartphone:
    def __init__(self, brand, model, storage, battery_life):
        self.brand = brand
        self.model = model
        self.storage = storage  # in GB
        self.battery_life = battery_life  # in hours

    def make_call(self, number):
        return f"Calling {number} from {self.brand} {self.model}..."

    def take_photo(self):
        return "Taking a photo..."

    def __str__(self):
        return f"{self.brand} {self.model} - {self.storage}GB, {self.battery_life} hours battery life"


class CameraSmartphone(Smartphone):
    def __init__(self, brand, model, storage, battery_life, camera_megapixels):
        super().__init__(brand, model, storage, battery_life)
        self.camera_megapixels = camera_megapixels

    def take_photo(self):
        return f"Taking a {self.camera_megapixels}MP photo..."

    def __str__(self):
        return super().__str__() + f", {self.camera_megapixels}MP camera"


# Example usage
smartphone = Smartphone("Apple", "iPhone 14", 128, 20)
camera_smartphone = CameraSmartphone("Samsung", "Galaxy S21", 256, 22, 108)

print(smartphone)
print(smartphone.make_call("123-456-7890"))
print(smartphone.take_photo())

print(camera_smartphone)
print(camera_smartphone.make_call("987-654-3210"))
print(camera_smartphone.take_photo())





Activity2
class Vehicle:
    def move(self):
        raise NotImplementedError("Subclasses must implement this method")


class Car(Vehicle):
    def move(self):
        return "Driving üöó"


class Bike(Vehicle):
    def move(self):
        return "Riding üö≤"


class Plane(Vehicle):
    def move(self):
        return "Flying ‚úàÔ∏è"


class Animal:
    def move(self):
        raise NotImplementedError("Subclasses must implement this method")


class Dog(Animal):
    def move(self):
        return "Running üêï"


class Bird(Animal):
    def move(self):
        return "Flying üê¶"


# Example usage
def demonstrate_movement(entity):
    print(entity.move())


# Create instances
car = Car()
bike = Bike()
plane = Plane()
dog = Dog()
bird = Bird()

# Demonstrate movement
demonstrate_movement(car)
demonstrate_movement(bike)
demonstrate_movement(plane)
demonstrate_movement(dog)
demonstrate_movement(bird)

